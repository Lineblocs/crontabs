// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	lineblocs "github.com/Lineblocs/go-helpers"
	mock "github.com/stretchr/testify/mock"

	models "lineblocs.com/crontabs/models"
)

// BillingHandler is an autogenerated mock type for the BillingHandler type
type BillingHandler struct {
	mock.Mock
}

type BillingHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *BillingHandler) EXPECT() *BillingHandler_Expecter {
	return &BillingHandler_Expecter{mock: &_m.Mock}
}

// ChargeCustomer provides a mock function with given fields: user, workspace, invoice
func (_m *BillingHandler) ChargeCustomer(user *lineblocs.User, workspace *lineblocs.Workspace, invoice *models.UserInvoice) error {
	ret := _m.Called(user, workspace, invoice)

	if len(ret) == 0 {
		panic("no return value specified for ChargeCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lineblocs.User, *lineblocs.Workspace, *models.UserInvoice) error); ok {
		r0 = rf(user, workspace, invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BillingHandler_ChargeCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChargeCustomer'
type BillingHandler_ChargeCustomer_Call struct {
	*mock.Call
}

// ChargeCustomer is a helper method to define mock.On call
//   - user *lineblocs.User
//   - workspace *lineblocs.Workspace
//   - invoice *models.UserInvoice
func (_e *BillingHandler_Expecter) ChargeCustomer(user interface{}, workspace interface{}, invoice interface{}) *BillingHandler_ChargeCustomer_Call {
	return &BillingHandler_ChargeCustomer_Call{Call: _e.mock.On("ChargeCustomer", user, workspace, invoice)}
}

func (_c *BillingHandler_ChargeCustomer_Call) Run(run func(user *lineblocs.User, workspace *lineblocs.Workspace, invoice *models.UserInvoice)) *BillingHandler_ChargeCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lineblocs.User), args[1].(*lineblocs.Workspace), args[2].(*models.UserInvoice))
	})
	return _c
}

func (_c *BillingHandler_ChargeCustomer_Call) Return(_a0 error) *BillingHandler_ChargeCustomer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BillingHandler_ChargeCustomer_Call) RunAndReturn(run func(*lineblocs.User, *lineblocs.Workspace, *models.UserInvoice) error) *BillingHandler_ChargeCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewBillingHandler creates a new instance of BillingHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBillingHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *BillingHandler {
	mock := &BillingHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
