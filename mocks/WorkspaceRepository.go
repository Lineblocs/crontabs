// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	lineblocs "github.com/Lineblocs/go-helpers"
	mock "github.com/stretchr/testify/mock"
)

// WorkspaceRepository is an autogenerated mock type for the WorkspaceRepository type
type WorkspaceRepository struct {
	mock.Mock
}

type WorkspaceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkspaceRepository) EXPECT() *WorkspaceRepository_Expecter {
	return &WorkspaceRepository_Expecter{mock: &_m.Mock}
}

// GetCallFromDB provides a mock function with given fields: id
func (_m *WorkspaceRepository) GetCallFromDB(id int) (*lineblocs.Call, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCallFromDB")
	}

	var r0 *lineblocs.Call
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*lineblocs.Call, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *lineblocs.Call); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lineblocs.Call)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkspaceRepository_GetCallFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallFromDB'
type WorkspaceRepository_GetCallFromDB_Call struct {
	*mock.Call
}

// GetCallFromDB is a helper method to define mock.On call
//   - id int
func (_e *WorkspaceRepository_Expecter) GetCallFromDB(id interface{}) *WorkspaceRepository_GetCallFromDB_Call {
	return &WorkspaceRepository_GetCallFromDB_Call{Call: _e.mock.On("GetCallFromDB", id)}
}

func (_c *WorkspaceRepository_GetCallFromDB_Call) Run(run func(id int)) *WorkspaceRepository_GetCallFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *WorkspaceRepository_GetCallFromDB_Call) Return(_a0 *lineblocs.Call, _a1 error) *WorkspaceRepository_GetCallFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkspaceRepository_GetCallFromDB_Call) RunAndReturn(run func(int) (*lineblocs.Call, error)) *WorkspaceRepository_GetCallFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDIDFromDB provides a mock function with given fields: id
func (_m *WorkspaceRepository) GetDIDFromDB(id int) (*lineblocs.DIDNumber, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDIDFromDB")
	}

	var r0 *lineblocs.DIDNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*lineblocs.DIDNumber, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *lineblocs.DIDNumber); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lineblocs.DIDNumber)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkspaceRepository_GetDIDFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDIDFromDB'
type WorkspaceRepository_GetDIDFromDB_Call struct {
	*mock.Call
}

// GetDIDFromDB is a helper method to define mock.On call
//   - id int
func (_e *WorkspaceRepository_Expecter) GetDIDFromDB(id interface{}) *WorkspaceRepository_GetDIDFromDB_Call {
	return &WorkspaceRepository_GetDIDFromDB_Call{Call: _e.mock.On("GetDIDFromDB", id)}
}

func (_c *WorkspaceRepository_GetDIDFromDB_Call) Run(run func(id int)) *WorkspaceRepository_GetDIDFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *WorkspaceRepository_GetDIDFromDB_Call) Return(_a0 *lineblocs.DIDNumber, _a1 error) *WorkspaceRepository_GetDIDFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkspaceRepository_GetDIDFromDB_Call) RunAndReturn(run func(int) (*lineblocs.DIDNumber, error)) *WorkspaceRepository_GetDIDFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromDB provides a mock function with given fields: id
func (_m *WorkspaceRepository) GetUserFromDB(id int) (*lineblocs.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromDB")
	}

	var r0 *lineblocs.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*lineblocs.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *lineblocs.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lineblocs.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkspaceRepository_GetUserFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromDB'
type WorkspaceRepository_GetUserFromDB_Call struct {
	*mock.Call
}

// GetUserFromDB is a helper method to define mock.On call
//   - id int
func (_e *WorkspaceRepository_Expecter) GetUserFromDB(id interface{}) *WorkspaceRepository_GetUserFromDB_Call {
	return &WorkspaceRepository_GetUserFromDB_Call{Call: _e.mock.On("GetUserFromDB", id)}
}

func (_c *WorkspaceRepository_GetUserFromDB_Call) Run(run func(id int)) *WorkspaceRepository_GetUserFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *WorkspaceRepository_GetUserFromDB_Call) Return(_a0 *lineblocs.User, _a1 error) *WorkspaceRepository_GetUserFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkspaceRepository_GetUserFromDB_Call) RunAndReturn(run func(int) (*lineblocs.User, error)) *WorkspaceRepository_GetUserFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceBillingInfo provides a mock function with given fields: workspace
func (_m *WorkspaceRepository) GetWorkspaceBillingInfo(workspace *lineblocs.Workspace) (*lineblocs.WorkspaceBillingInfo, error) {
	ret := _m.Called(workspace)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceBillingInfo")
	}

	var r0 *lineblocs.WorkspaceBillingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*lineblocs.Workspace) (*lineblocs.WorkspaceBillingInfo, error)); ok {
		return rf(workspace)
	}
	if rf, ok := ret.Get(0).(func(*lineblocs.Workspace) *lineblocs.WorkspaceBillingInfo); ok {
		r0 = rf(workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lineblocs.WorkspaceBillingInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*lineblocs.Workspace) error); ok {
		r1 = rf(workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkspaceRepository_GetWorkspaceBillingInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceBillingInfo'
type WorkspaceRepository_GetWorkspaceBillingInfo_Call struct {
	*mock.Call
}

// GetWorkspaceBillingInfo is a helper method to define mock.On call
//   - workspace *lineblocs.Workspace
func (_e *WorkspaceRepository_Expecter) GetWorkspaceBillingInfo(workspace interface{}) *WorkspaceRepository_GetWorkspaceBillingInfo_Call {
	return &WorkspaceRepository_GetWorkspaceBillingInfo_Call{Call: _e.mock.On("GetWorkspaceBillingInfo", workspace)}
}

func (_c *WorkspaceRepository_GetWorkspaceBillingInfo_Call) Run(run func(workspace *lineblocs.Workspace)) *WorkspaceRepository_GetWorkspaceBillingInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lineblocs.Workspace))
	})
	return _c
}

func (_c *WorkspaceRepository_GetWorkspaceBillingInfo_Call) Return(_a0 *lineblocs.WorkspaceBillingInfo, _a1 error) *WorkspaceRepository_GetWorkspaceBillingInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkspaceRepository_GetWorkspaceBillingInfo_Call) RunAndReturn(run func(*lineblocs.Workspace) (*lineblocs.WorkspaceBillingInfo, error)) *WorkspaceRepository_GetWorkspaceBillingInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceFromDB provides a mock function with given fields: id
func (_m *WorkspaceRepository) GetWorkspaceFromDB(id int) (*lineblocs.Workspace, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceFromDB")
	}

	var r0 *lineblocs.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*lineblocs.Workspace, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *lineblocs.Workspace); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lineblocs.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkspaceRepository_GetWorkspaceFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceFromDB'
type WorkspaceRepository_GetWorkspaceFromDB_Call struct {
	*mock.Call
}

// GetWorkspaceFromDB is a helper method to define mock.On call
//   - id int
func (_e *WorkspaceRepository_Expecter) GetWorkspaceFromDB(id interface{}) *WorkspaceRepository_GetWorkspaceFromDB_Call {
	return &WorkspaceRepository_GetWorkspaceFromDB_Call{Call: _e.mock.On("GetWorkspaceFromDB", id)}
}

func (_c *WorkspaceRepository_GetWorkspaceFromDB_Call) Run(run func(id int)) *WorkspaceRepository_GetWorkspaceFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *WorkspaceRepository_GetWorkspaceFromDB_Call) Return(_a0 *lineblocs.Workspace, _a1 error) *WorkspaceRepository_GetWorkspaceFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkspaceRepository_GetWorkspaceFromDB_Call) RunAndReturn(run func(int) (*lineblocs.Workspace, error)) *WorkspaceRepository_GetWorkspaceFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkspaceRepository creates a new instance of WorkspaceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkspaceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkspaceRepository {
	mock := &WorkspaceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
